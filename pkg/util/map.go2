package util

// MapEqual compares maps for equality
func MapEqual[K, V comparable](a, b map[K]V) bool {
	if len(a) != len(b) {
		return false
	}

	for k, v := range a {
		if b[k] != v {
			return false
		}
	}

	return true
}

// MapCopy makes (shallow) copy of src map
func MapCopy[K comparable, V any](src map[K]V) map[K]V {
	dst := make(map[K]V)
	for k, v := range src {
		dst[k] = v
	}

	return dst
}

// MapMerge merges maps ms from left to right with overwriting existing keys
func MapMerge[K comparable, V any](ms ...map[K]V) map[K]V {
	if len(ms) == 0 {
		return make(map[K]V)
	}

	rv := MapCopy(ms[0])
	for _, m := range ms[1:] {
		for k, v := range m {
			rv[k] = v
		}
	}

	return rv
}
