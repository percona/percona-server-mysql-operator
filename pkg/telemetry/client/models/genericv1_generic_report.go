// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Genericv1GenericReport GenericReport contains set of metrics and service information.
// The exact metrics pairs (metric name, metric value) is defined by each product.
//
// swagger:model genericv1GenericReport
type Genericv1GenericReport struct {

	// Time when this event was generated by the sender.
	// Required.
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// Report UUID.
	// Required.
	ID string `json:"id,omitempty"`

	// Product instance unique identifier. UUID.
	// Required.
	InstanceID string `json:"instanceId,omitempty"`

	// Metrics collection.
	// Optional.
	Metrics []*GenericReportMetric `json:"metrics"`

	// Product family.
	// Mandatory.
	ProductFamily *V1ProductFamily `json:"productFamily,omitempty"`
}

// Validate validates this genericv1 generic report
func (m *Genericv1GenericReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductFamily(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Genericv1GenericReport) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Genericv1GenericReport) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(m.Metrics); i++ {
		if swag.IsZero(m.Metrics[i]) { // not required
			continue
		}

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Genericv1GenericReport) validateProductFamily(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductFamily) { // not required
		return nil
	}

	if m.ProductFamily != nil {
		if err := m.ProductFamily.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productFamily")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("productFamily")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this genericv1 generic report based on the context it is used
func (m *Genericv1GenericReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductFamily(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Genericv1GenericReport) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metrics); i++ {

		if m.Metrics[i] != nil {

			if swag.IsZero(m.Metrics[i]) { // not required
				return nil
			}

			if err := m.Metrics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Genericv1GenericReport) contextValidateProductFamily(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductFamily != nil {

		if swag.IsZero(m.ProductFamily) { // not required
			return nil
		}

		if err := m.ProductFamily.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productFamily")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("productFamily")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Genericv1GenericReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Genericv1GenericReport) UnmarshalBinary(b []byte) error {
	var res Genericv1GenericReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
