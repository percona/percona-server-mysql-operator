apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: haproxy
    app.kubernetes.io/instance: cluster
    app.kubernetes.io/managed-by: percona-server-operator
    app.kubernetes.io/name: percona-server
    app.kubernetes.io/part-of: percona-server
  name: cluster-haproxy
  namespace: orc-ns
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: haproxy
      app.kubernetes.io/instance: cluster
      app.kubernetes.io/managed-by: percona-server-operator
      app.kubernetes.io/name: percona-server
      app.kubernetes.io/part-of: percona-server
  serviceName: cluster-haproxy
  template:
    metadata:
      annotations:
        percona.com/configuration-hash: config-hash
        percona.com/last-applied-tls: tls-hash
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: haproxy
        app.kubernetes.io/instance: cluster
        app.kubernetes.io/managed-by: percona-server-operator
        app.kubernetes.io/name: percona-server
        app.kubernetes.io/part-of: percona-server
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: haproxy
                app.kubernetes.io/instance: cluster
                app.kubernetes.io/managed-by: percona-server-operator
                app.kubernetes.io/name: percona-server
                app.kubernetes.io/part-of: percona-server
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - haproxy
        command:
        - /opt/percona/haproxy-entrypoint.sh
        env:
        - name: CLUSTER_TYPE
          value: group-replication
        image: perconalab/percona-server-mysql-operator:main-haproxy
        imagePullPolicy: Always
        name: haproxy
        ports:
        - containerPort: 3306
          name: mysql
        - containerPort: 3307
          name: mysql-replicas
        - containerPort: 3309
          name: proxy-protocol
        - containerPort: 33060
          name: mysqlx
        resources:
          requests:
            cpu: 600m
            memory: 1G
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/percona
          name: bin
        - mountPath: /etc/haproxy/mysql
          name: haproxy-config
        - mountPath: /etc/mysql/mysql-users-secret
          name: users
        - mountPath: /etc/mysql/mysql-tls-secret
          name: tls
        - mountPath: /etc/haproxy-custom/
          name: config
      - args:
        - /opt/percona/peer-list
        - -on-change=/opt/percona/haproxy_add_mysql_nodes.sh
        - -service=$(MYSQL_SERVICE)
        command:
        - /opt/percona/haproxy-entrypoint.sh
        env:
        - name: MYSQL_SERVICE
          value: cluster-mysql-proxy
        image: perconalab/percona-server-mysql-operator:main-haproxy
        imagePullPolicy: Always
        name: mysql-monit
        resources:
          requests:
            cpu: 600m
            memory: 1G
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/percona
          name: bin
        - mountPath: /etc/haproxy/mysql
          name: haproxy-config
        - mountPath: /etc/mysql/mysql-users-secret
          name: users
        - mountPath: /etc/mysql/mysql-tls-secret
          name: tls
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - /opt/percona-server-mysql-operator/ps-init-entrypoint.sh
        image: init-image
        imagePullPolicy: Always
        name: haproxy-init
        resources:
          requests:
            cpu: 600m
            memory: 1G
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/percona
          name: bin
      restartPolicy: Always
      runtimeClassName: runtime-class-name
      schedulerName: default-scheduler
      volumes:
      - emptyDir: {}
        name: bin
      - emptyDir: {}
        name: haproxy-config
      - name: users
        secret:
          secretName: internal-cluster
      - name: tls
        secret:
          secretName: cluster1-ssl
      - name: config
        projected:
          sources:
          - configMap:
              items:
              - key: haproxy.cfg
                path: haproxy.cfg
              name: cluster-haproxy
              optional: true
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
status:
  availableReplicas: 0
  replicas: 0
